[tool.ruff]
extend-select = [
  #    "A",   # flake8-builtins
  #    # "ANN", # flake8-annotations
  #    "ARG", # flake8-unused-arguments
  #    "B",   # flake8-bugbear
  #    "BLE", # flake8-blind-except
  #    "C4",  # flake8-comprehensions
  "C90", # mccabe
  #    "DJ",  # flake8-django
  #    "DTZ", # flake8-datetimez
  "E", # pycodestyle
  #    "ERA", # flake8-eradicate
  "F", # pyflakes
  #    "FBT", # flake8-boolean-trap
  "I",   # isort
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  #    "N",   # pep8-naming
  #    "PGH", # pygrep-hooks
  #    "PIE", # flake8-pie
  #    "PLC", # pylint
  #    "PLE", # pylint
  #    "PLR", # pylint
  #    "PLW", # pylint
  #    "PT",  # flake8-pytest
  #    "PTH", # flake8-use-pathlib
  #    "RET", # flake8-return
  #    "RSE", # flake8-raise
  "RUF", # ruff
  "SIM", # flake8-simplify
  "T10", # flake8-debugger
  #    "T20", # flake8-print
  #    "TRY", # tryceratops
  "UP", # pyupgrade
  "W",  # pycodestyle
]
extend-exclude = [".venv"]
output-format = "grouped"
line-length = 88
ignore = [
  "E501",   # line too long
  "ISC001", # implicit string concatenation
  "W",      # pycodestyle warnings
]
fix = false
unfixable = []
src = ["copilot_completer"]
target-version = "py311"


[tool.ruff.per-file-ignores]
"setup.py" = ["SIM115"]

[tool.ruff.isort]
combine-as-imports = true
lines-after-imports = 2
known-first-party = ["copilot_completer"]
known-third-party = ["IPython", "requests"]
known-local-folder = ["copilot_completer"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.format]
indent-style = "space"
line-ending = "lf"
preview = false
quote-style = "double"
skip-magic-trailing-comma = false

[tool.pycln]
all = true

[tool.pyright]
pythonVersion = "3.12"
pythonPlatform = "All"
typeCheckingMode = "basic"
venvPath = "."
venv = ".venv"

include = ["*.py"]
exclude = ["**/__pycache__"]
ignore = ["**/__pycache__"]
strict = []

useLibraryCodeForTypes = true
enableExperimentalFeatures = true

# Deprecations
deprecateTypingAliases = true

# Settings only enabled in Strict
# This means inference will choose the most specific type rather than Any
strictListInference = true
strictDictionaryInference = true
strictSetInference = true

# Settings which are always on
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true

# Settings which are warnings in Basic mode
reportMissingImports = "error"
reportUndefinedVariable = "error"
reportAssertAlwaysTrue = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidTypeVarUse = "error"
reportMissingTypeStubs = "error"
reportMissingModuleSource = "error"
reportSelfClsParameterName = "error"
reportUnsupportedDunderAll = "error"
reportUnusedExpression = "error"
reportWildcardImportFromLibrary = "error"

# Settings common to Basic and Strict mode
reportGeneralTypeIssues = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportTypedDictNotRequiredAccess = "error"
reportPrivateImportUsage = "error"
reportUnboundVariable = "error"
reportUnusedCoroutine = "error"

# Strict only settings
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "none"
reportIncompatibleMethodOverride = "none"
reportIncompatibleVariableOverride = "none"
reportIncompleteStub = "none"
reportInconsistentConstructor = "none"
reportInvalidStubStatement = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "none"
reportMissingTypeArgument = "none"
reportOverlappingOverload = "error"
reportPrivateUsage = "none"
reportTypeCommentUsage = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "none"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "none"
reportUnusedClass = "error"
reportUnusedImport = "none"
reportUnusedFunction = "none"
reportUnusedVariable = "none"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "none"
reportUntypedNamedTuple = "error"

# Settings which are always false unless overridden
# These are usually code style issues and
# we don't want to be forced to fix them unless we want to
reportCallInDefaultInitializer = "none"
reportImplicitOverride = "none"
reportImplicitStringConcatenation = "none"
reportImportCycles = "none"
reportMissingSuperCall = "none"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "none"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "none"
